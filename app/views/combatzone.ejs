<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,500,700,800' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

    <link href="css/style.default.css" rel="stylesheet" id="theme-stylesheet">
    <link href="css/animate.css" rel="stylesheet">



</head>

<body>
  <!--CABECERA---------------------------->
    <% include partials/cabecera %>
  <!-- BARRA NAVEGACIÃ“N---------------------------->
  <% include partials/barranav %>

    <div class="container" id="todo">
          <div class="heading">
              <h3 class="text-uppercase">Combat Zone</h3>
          </div>
          <div class="text-left">
              <p class="lead">Esta es la zona de combate</p>
              <p class="lead" id="welcome"> Connecting...</p>
          </div>


    <div id="content"></div>
        <div>

          <p id="user"></p>
          <input type="text" id="input" disabled="disabled" />

        </div>
    </div>

      <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.ui.min.js"></script>

<script>
(function() {
  $("#todo").hide();
    var $stage;

    /* Colors, prefix finder for transforms */
    var Colors = {
        white: '#000000',
        blue: '#40cacc'
    }

    var prefix = (function () {
        var styles = window.getComputedStyle(document.documentElement, ''),
            pre = (Array.prototype.slice
                .call(styles)
                .join('')
                .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
                )[1],
            dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
        return {
            dom: dom,
            lowercase: pre,
            css: '-' + pre + '-',
            js: pre[0].toUpperCase() + pre.substr(1)
        };
    })();

    var transform = prefix.css+'transform';

    function createDiv(className) {
        var div = document.createElement('div');
        if(className) div.className = className;
        var $div = $(div);
        return $div;
    }

    /* Store transform values for CSS manipulation */
    $.fn.extend({
        transform: function(props) {
            var _this = this;
            for(var i in props) {
                _this[i] = props[i];
            }
            return transformString();

            function transformString() {
                var string = '';
                if(_this.x) string += 'translateX('+_this.x+'px)';
                if(_this.y) string += 'translateY('+_this.y+'px)';
                if(_this.skewX) string += 'skewX('+_this.skewX+'deg)';
                if(_this.skewY) string += 'skewY('+_this.skewY+'deg)';
                if(_this.rotation) string += 'rotate('+_this.rotation+'deg)';
                if(_this.scale) string += 'scale('+_this.scale+','+_this.scale+')';
                return string;
            };
        }
    });

    /* Animation Componenents */

    function VelocityScene() {
        var _this = this;
        var $l1outer, $l1inner, $l2, $text, $skewbox;
        var letters = [], text = 'COMBAT ZONE';

        (function() {
           initElements();
        })();

        function initElements() {
            $skewbox = createDiv('box');
            $stage.append($skewbox);
            $skewbox.hide();

            $l1outer = createDiv('line');
            $l1inner = createDiv('line');

            $stage.append($l1outer);
            $l1outer.append($l1inner);

            $l2 = createDiv('line');

            $stage.append($l2);

            $text = createDiv('text');

            for(var i in text) {
                var $l = createDiv();
                $l.html(text[i]);
                $l.css({position: 'relative', float: 'left', display: 'inline-block', width: 'auto', marginRight: 20,
                    transform: $l.transform({y: -160})});
                $text.append($l);
                letters.push($l);
            }
            $stage.append($text);

        }

        this.beginAnimation = function() {
            $skewbox.css({width: 1000, height: 200, background: Colors.blue, left: '50%', marginLeft: 100, top: '50%',
                transform: $skewbox.transform({skewY: -9}), marginTop: -60 });
            $l1outer.css({overflow: 'hidden', width: 500, height: 12, left: '50%', marginLeft: 100, top: '50%',
                          marginTop: -5, transform: $l1outer.transform({x: 250, y: 0}) });
            $l1inner.css({width: 1000, height: 10, top: 1, transform: $l1inner.transform({x: -500, y: 0}), background: Colors.white});
            $l2.css({width: 1000, height: 10, left: '50%', marginLeft: 100, top: '50%', marginTop: -4,
                background: Colors.white, display: 'none', transform: $l2.transform({skewY: -9})});
            $text.css({width: 1000, height: 70, fontSize: 100, color: Colors.white, left: '50%', marginLeft: 130,
                top: '50%', marginTop: -75, transform: $text.transform({skewY: -9, y: 70}), overflow: 'hidden'});
            $l1outer.show();
            $l1inner.show();
            $text.show();

            $l1inner.velocity({translateX: [0, -1000], translateY: [0,0]}, 300, 'easeInOutCubic');
            $l1outer.velocity({translateX: [0, 1000], translateY: [0,0]}, 300, 'easeInOutCubic');
            $l1outer.velocity({skewY: -9}, {duration: 1000, easing: 'easeInOutQuart', complete: function() {
                $l2.show();
                $l1outer.velocity({translateY: -70}, 400, 'easeOutQuart');
                $l2.velocity({translateY: 70, skewY: [-9,-9]}, 400, 'easeOutQuart');
                $text.velocity({height: 160, skewY: [-9,-9], translateY: [0,70]}, 400, 'easeOutQuart');
                for(var i in letters) {
                    letters[i].velocity({translateY: [0, -160]}, 250, 'easeOutCubic', 100 + i * 50);
                }
            }});
        }

        this.close = function(callback) {
            $text.velocity({height: 10, translateY: [69, 0]}, {duration: 300, easing: 'easeOutCubic'});
            for(var i in letters) {
                letters[i].velocity({translateY: [-150, 0]}, 800, 'easeOutCubic');
            }
            $l1outer.velocity({translateY: [0, -70]}, {duration: 300, easing: 'easeOutCubic'});
            $l2.velocity({translateY: [0, 70], skewY: [-9,-9]}, {duration: 300, easing: 'easeOutCubic',
                complete: function() {
                    $l1inner.css({height: 110, transform: $l1inner.transform({y: -100, x: 0})});
                    $l1outer.css({height: 110});
                    $l2.hide();
                    $l1outer.velocity({translateY: [-55, 0]}, {duration: 200, easing: 'easeInCubic'});
                    $l1inner.velocity({translateY: [0, -100]}, {duration: 200, easing: 'easeInCubic', complete: function() {
                        $skewbox.show();
                        $skewbox.velocity({skewY: [0, -9]}, 200, 'easeInOutSine');
                        $l1outer.velocity({skewY: [0, -9]}, {duration: 200, easing: 'easeInOutSine', delay: 100, complete: function() {
                            $skewbox.hide();
                            $l1outer.velocity({translateX: -80}, {duration: 100, easing: 'easeOutCubic'});
                            $l1inner.velocity({translateX: 160}, {duration: 100, easing: 'easeOutCubic', complete: function() {
                               callback();
                               $l1outer.hide();
                               $text.hide();
                            }});
                        }});

                    }});
            }});
        }
    }

    function VelocityMask() {
        var  $text;
        var letters = [], text = 'ZONE';
        (function() {
            initElements();
        })();

        function initElements() {
            $text = createDiv('text');
            $text.css({width: 500, height: 160, fontSize: 100, color: Colors.blue, left: '50%', marginLeft: 658,
                top: '50%', marginTop: -204, transform: $text.transform({skewY: -9}), overflow: 'hidden'});
            for(var i in text) {
                var $l = createDiv();
                var $linner = createDiv();
                $l.css({position: 'relative', float: 'left', display: 'inline-block', width: 'auto', overflow: 'hidden', transform: $l.transform({y: -140})});
                $linner.css({position: 'relative', float: 'left', display: 'inline-block', width: 'auto', marginRight: 20, transform: $linner.transform({y: 140})});
                $linner.html(text[i]);
                $l.append($linner);
                $text.append($l);
                letters.push($l);
            }
            $stage.append($text);
        }

        this.animateIn = function() {
            $text.show();
            for(var i in letters) {
                letters[i].velocity({translateY: [0, -140]}, {duration: 200+i*25, easing: 'easeOutCubic', delay: i*50});
                letters[i].find('div').velocity({translateY: [0, 140]}, {duration: 200+i*25, easing: 'easeOutCubic', delay: i*50});
            }

            setTimeout(function() {
                for(var j in letters) {
                    letters[j].velocity({translateY: 140}, {duration: 250, easing: 'easeInCubic', delay: j*40});
                    letters[j].find('div').velocity({translateY: -140}, {duration: 250, easing: 'easeInCubic', delay: j*40});
                }
            }, 700);
        }

        this.hide = function() {
            $text.hide();
            $("#todo").show();

        }

    }

    function init() {
        $stage = createDiv('stage');
        $(document.body).append($stage);
        $stage.css({width: '100%', height: '100%'});


        var velocityScene = new VelocityScene();
        var velocityMask = new VelocityMask();

        animate();

        function animate() {
          setTimeout(velocityScene.beginAnimation, 500);
          setTimeout(velocityMask.animateIn, 1500);
          setTimeout(function() {
              velocityScene.close(function() {
                  velocityMask.hide();
              });
          }, 3500);
        }

}

    $(document).on('ready', function() {
        init();
    });

})();



// $("#todo").hide();
// $("#izd").velocity({ translateX: [ 500, 0 ] }, { duration: 2000 });
// $("#dch").velocity({ translateX: [ -500, 0 ] },
//   { duration: 2000, complete: function() {
//        $("#img").hide();
//        $("#todo").show();
//     }
//   });



</script>
<script>
console.log("Dentro");
$(function () {
  "use strict";
  // for better performance - to avoid searching in DOM
  var content = $('#content');
  var user = $('#user');
  var input = $('#input');
  var status = $('#status');
  var welcome = $('#welcome');
  // my name sent to the server
  var myName = false;

  // if browser doesn't support WebSocket, just show
  // some notification and exit
  if (!window.WebSocket) {
    content.html($('<p>',
      { text:'Sorry, but your browser doesn\'t support WebSocket.'}
    ));
    //input.hide();
    $('span').hide();
    return;
  }
  // open connection
  var connection = new WebSocket('ws://127.0.0.1:4333');

  connection.onopen = function () {
    // first we wait for users
    status.text('Waiting users');
    connection.send('<%=nombre%>');
  };
  connection.onerror = function (error) {
    // just in there were some problems with connection...
    content.html($('<p>', {
      text: 'Sorry, but there\'s some problem with your '
         + 'connection or the server is down.'
    }));
  };

  // most important part - incoming messages
  connection.onmessage = function (message) {
    // try to parse JSON message. Because we know that the server
    // always returns JSON this should work without any problem but
    // we should make sure that the message is not chunked or
    // otherwise damaged.
    try {
      var json = JSON.parse(message.data);
    } catch (e) {
      console.log('Invalid JSON: ', message.data);
      return;
    }
    // NOTE: if you're not sure about the JSON structure
    // check the server source code above
    // first response from the server with user's color
    if (json.type === 'history') { // entire message history
      // insert every single message to the chat window
      for (var i=0; i < json.data.length; i++) {
      addMessage(json.data[i].author, json.data[i].text,
          json.data[i].color, new Date(json.data[i].time));
      }
    } else if (json.type === 'list') {
      console.log(json.data);

    } else if (json.type === 'message') { // it's a single message
      // let the user write another message
      input.removeAttr('disabled');
      addMessage(json.data.author, json.data.text,
                 json.data.color, new Date(json.data.time));
    } else if (json.type === 'user') {
      if(json.data.author === '<%=nombre%>') {
        welcome.text('Bienvenido ');
      } else {
        if (json.data.type === 'robot')
        user.text('Nuevo robot listo ' + json.data.author);
      }
    } else {
      console.log('Hmm..., I\'ve never seen JSON like this:', json);
    }
  };
  /**
   * Send message when user presses Enter key
   */
  input.keydown(function(e) {
    if (e.keyCode === 13) {
      var msg = $(this).val();
      if (!msg) {
        return;
      }
      // send the message as an ordinary text
      connection.send(msg);
      $(this).val('');
      // disable the input field to make the user wait until server
      // sends back response
      input.attr('disabled', 'disabled');
      // we know that the first message sent from a user their name
      if (myName === false) {
        myName = msg;
      }
    }
  });
  /**
   * This method is optional. If the server wasn't able to
   * respond to the in 3 seconds then show some error message
   * to notify the user that something is wrong.
   */
  setInterval(function() {
    if (connection.readyState !== 1) {
      status.text('Error');
      input.attr('disabled', 'disabled').val(
          'Unable to communicate with the WebSocket server.');
    }
  }, 3000);
  /**
   * Add message to the chat window
   */
  function addMessage(author, message, color, dt) {
    content.prepend('<p><span style="color:' + color + '">'
        + author + '</span> @ ' + (dt.getHours() < 10 ? '0'
        + dt.getHours() : dt.getHours()) + ':'
        + (dt.getMinutes() < 10
          ? '0' + dt.getMinutes() : dt.getMinutes())
        + ': ' + message + '</p>');
  }
});


</script>


</body>
</html>
